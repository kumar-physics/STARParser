/* The following code was generated by JFlex 1.3.5 on 11/29/12 3:27 PM */

/*
 * This software is copyright (c) 2006 Board of Regents, University of
 * Wisconsin. All Rights Reserved.
 *
 * $Id$
 *
 */
//***************************************************************************
// Scanner flex specification
//***************************************************************************
/* Lex Definitions for a STAR File */

package edu.bmrb.sans;

/**
 * STAR Lexer with some error checking.
 *
 * <STRONG>NOTES</STRONG>:<UL>
 *  <LI>this scanner does not close input file on EOF</LI>
 *  <LI>the scanner does not generate fake "end-of" tokens for
 *      end of data block, end of global block, end of loop
 *      (if closing "stop_" is omitted)</LI>
 *  <LI>this scanner generates "keyword in value" warnings (in C++
 *      version they are generated by the parser)</LI>
 * </UL>
 */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/29/12 3:27 PM from the specification file
 * <tt>file:/share/dmaziuk/projects/sans/java/src/edu/bmrb/sans/star.flex</tt>
 */
public class STARLexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYDOUBLE = 4;
  final public static int YYSEMI = 6;
  final public static int YYINITIAL = 0;
  final public static int YYSEMIEND = 8;
  final public static int YYSINGLE = 2;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\10\0\2\1\1\3\2\0\1\2\22\0\1\1\1\0\1\23\1\25"+
    "\1\24\1\21\1\0\1\22\5\0\2\21\1\0\12\20\1\0\1\26"+
    "\5\0\1\10\1\7\1\20\1\12\1\16\1\20\1\4\4\20\1\5"+
    "\2\20\1\6\1\17\2\20\1\14\1\13\1\20\1\15\4\20\1\21"+
    "\1\0\1\21\1\0\1\11\1\0\1\10\1\7\1\20\1\12\1\16"+
    "\1\20\1\4\4\20\1\5\2\20\1\6\1\17\2\20\1\14\1\13"+
    "\1\20\1\15\4\20\57\0\1\20\12\0\1\20\4\0\1\20\5\0"+
    "\27\20\1\0\37\20\1\0\u01ca\20\4\0\14\20\16\0\5\20\7\0"+
    "\1\20\1\0\1\20\201\0\5\20\1\0\2\20\2\0\4\20\10\0"+
    "\1\20\1\0\3\20\1\0\1\20\1\0\24\20\1\0\123\20\1\0"+
    "\213\20\10\0\236\20\11\0\46\20\2\0\1\20\7\0\47\20\110\0"+
    "\33\20\5\0\3\20\55\0\53\20\25\0\12\20\4\0\2\20\1\0"+
    "\143\20\1\0\1\20\17\0\2\20\7\0\17\20\2\0\1\20\20\0"+
    "\1\20\1\0\36\20\35\0\131\20\13\0\1\20\16\0\53\20\11\0"+
    "\2\20\4\0\1\20\5\0\26\20\4\0\1\20\11\0\1\20\3\0"+
    "\1\20\27\0\31\20\253\0\66\20\3\0\1\20\22\0\1\20\7\0"+
    "\12\20\4\0\12\20\1\0\7\20\1\0\7\20\5\0\10\20\2\0"+
    "\2\20\2\0\26\20\1\0\7\20\1\0\1\20\3\0\4\20\3\0"+
    "\1\20\20\0\1\20\15\0\2\20\1\0\3\20\4\0\14\20\23\0"+
    "\6\20\4\0\2\20\2\0\26\20\1\0\7\20\1\0\2\20\1\0"+
    "\2\20\1\0\2\20\37\0\4\20\1\0\1\20\7\0\12\20\2\0"+
    "\3\20\20\0\11\20\1\0\3\20\1\0\26\20\1\0\7\20\1\0"+
    "\2\20\1\0\5\20\3\0\1\20\22\0\1\20\17\0\2\20\4\0"+
    "\12\20\25\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0"+
    "\2\20\1\0\5\20\3\0\1\20\36\0\2\20\1\0\3\20\4\0"+
    "\12\20\1\0\1\20\21\0\1\20\1\0\6\20\3\0\3\20\1\0"+
    "\4\20\3\0\2\20\1\0\1\20\1\0\2\20\3\0\2\20\3\0"+
    "\3\20\3\0\14\20\26\0\1\20\25\0\12\20\25\0\10\20\1\0"+
    "\3\20\1\0\27\20\1\0\12\20\1\0\5\20\3\0\1\20\32\0"+
    "\2\20\6\0\2\20\4\0\12\20\25\0\10\20\1\0\3\20\1\0"+
    "\27\20\1\0\12\20\1\0\5\20\3\0\1\20\40\0\1\20\1\0"+
    "\2\20\4\0\12\20\1\0\2\20\22\0\10\20\1\0\3\20\1\0"+
    "\51\20\2\0\1\20\20\0\1\20\21\0\2\20\4\0\12\20\12\0"+
    "\6\20\5\0\22\20\3\0\30\20\1\0\11\20\1\0\1\20\2\0"+
    "\7\20\72\0\60\20\1\0\2\20\14\0\7\20\11\0\12\20\47\0"+
    "\2\20\1\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20\6\0"+
    "\4\20\1\0\7\20\1\0\3\20\1\0\1\20\1\0\1\20\2\0"+
    "\2\20\1\0\4\20\1\0\2\20\11\0\1\20\2\0\5\20\1\0"+
    "\1\20\11\0\12\20\2\0\2\20\42\0\1\20\37\0\12\20\26\0"+
    "\10\20\1\0\44\20\33\0\5\20\163\0\53\20\24\0\13\20\6\0"+
    "\6\20\4\0\4\20\3\0\1\20\3\0\2\20\7\0\3\20\4\0"+
    "\15\20\14\0\1\20\1\0\12\20\6\0\46\20\12\0\53\20\1\0"+
    "\1\20\3\0\u0149\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0"+
    "\4\20\2\0\51\20\1\0\4\20\2\0\41\20\1\0\4\20\2\0"+
    "\7\20\1\0\1\20\1\0\4\20\2\0\17\20\1\0\71\20\1\0"+
    "\4\20\2\0\103\20\45\0\20\20\20\0\125\20\14\0\u026c\20\2\0"+
    "\21\20\1\0\32\20\5\0\113\20\25\0\15\20\1\0\4\20\16\0"+
    "\22\20\16\0\22\20\16\0\15\20\1\0\3\20\17\0\64\20\43\0"+
    "\1\20\4\0\1\20\3\0\12\20\46\0\12\20\6\0\130\20\10\0"+
    "\51\20\1\0\1\20\5\0\106\20\12\0\35\20\51\0\50\20\2\0"+
    "\5\20\13\0\54\20\25\0\7\20\10\0\12\20\46\0\27\20\11\0"+
    "\65\20\53\0\12\20\6\0\12\20\15\0\1\20\135\0\57\20\21\0"+
    "\7\20\4\0\12\20\51\0\36\20\15\0\14\20\6\0\46\20\32\0"+
    "\44\20\34\0\12\20\3\0\61\20\153\0\4\20\1\0\4\20\16\0"+
    "\300\20\100\0\u0116\20\2\0\6\20\2\0\46\20\2\0\6\20\2\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\37\20\2\0"+
    "\65\20\1\0\7\20\1\0\1\20\3\0\3\20\1\0\7\20\3\0"+
    "\4\20\2\0\6\20\4\0\15\20\5\0\3\20\1\0\7\20\164\0"+
    "\1\20\15\0\1\20\20\0\15\20\145\0\1\20\4\0\1\20\2\0"+
    "\12\20\1\0\1\20\3\0\5\20\6\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\4\20\1\0\13\20\2\0\4\20\5\0\5\20\4\0"+
    "\1\20\64\0\2\20\u0a7b\0\57\20\1\0\57\20\1\0\205\20\6\0"+
    "\4\20\21\0\46\20\12\0\66\20\11\0\1\20\20\0\27\20\11\0"+
    "\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0"+
    "\7\20\1\0\7\20\1\0\7\20\120\0\1\20\u01d5\0\2\20\52\0"+
    "\5\20\5\0\2\20\4\0\126\20\6\0\3\20\1\0\132\20\1\0"+
    "\4\20\5\0\51\20\3\0\136\20\21\0\33\20\65\0\20\20\u0200\0"+
    "\u19b6\20\112\0\u51cc\20\64\0\u048d\20\103\0\56\20\2\0\u010d\20\3\0"+
    "\34\20\24\0\57\20\20\0\31\20\10\0\106\20\61\0\11\20\2\0"+
    "\147\20\2\0\4\20\1\0\2\20\16\0\12\20\120\0\10\20\1\0"+
    "\3\20\1\0\4\20\1\0\27\20\35\0\64\20\16\0\62\20\34\0"+
    "\12\20\30\0\6\20\3\0\1\20\4\0\46\20\12\0\27\20\31\0"+
    "\35\20\7\0\57\20\34\0\13\20\46\0\51\20\27\0\3\20\1\0"+
    "\10\20\4\0\12\20\6\0\27\20\3\0\1\20\5\0\60\20\1\0"+
    "\1\20\3\0\2\20\2\0\5\20\2\0\1\20\1\0\1\20\30\0"+
    "\3\20\43\0\6\20\2\0\6\20\2\0\6\20\11\0\7\20\1\0"+
    "\7\20\221\0\43\20\15\0\12\20\6\0\u2ba4\20\14\0\27\20\4\0"+
    "\61\20\u2104\0\u012e\20\2\0\76\20\2\0\152\20\46\0\7\20\14\0"+
    "\5\20\5\0\1\20\1\0\12\20\1\0\15\20\1\0\5\20\1\0"+
    "\1\20\1\0\2\20\1\0\2\20\1\0\154\20\41\0\u016b\20\22\0"+
    "\100\20\2\0\66\20\50\0\14\20\164\0\5\20\1\0\207\20\23\0"+
    "\12\20\7\0\32\20\6\0\32\20\13\0\131\20\3\0\6\20\2\0"+
    "\6\20\2\0\6\20\2\0\3\20\43\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    23,    46,    69,    92,   115,   138,   161,   184,   207, 
      230,   253,   276,   299,   322,   345,   368,   391,   391,   414, 
      437,   460,   483,   391,   391,   506,   391,   529,   391,   391, 
      552,   575,   598,   621,   644,   667,   322,   414,   437,   529, 
      690,   713,   598,   736,   759,   782,   805,   828,   851,   874, 
      897,   920,   943,   966,   989,  1012,  1035,  1058,   966,  1081, 
     1104,  1127,  1150,  1173
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\7\1\10\1\11\1\10\1\12\1\13\3\7\1\14"+
    "\1\15\1\7\1\16\7\7\1\17\1\20\2\7\1\10"+
    "\1\11\1\10\1\12\1\13\3\7\1\14\1\15\1\7"+
    "\1\16\7\7\1\17\1\20\1\21\3\22\1\23\16\22"+
    "\1\24\7\22\1\23\17\22\1\25\3\22\2\26\1\27"+
    "\1\30\23\26\2\31\1\32\1\33\22\31\1\34\1\7"+
    "\3\0\23\7\1\0\1\10\1\11\1\10\16\0\1\35"+
    "\1\36\4\0\3\11\23\0\1\7\3\0\1\7\1\37"+
    "\22\7\3\0\2\7\1\40\21\7\3\0\15\41\7\7"+
    "\3\0\4\7\1\42\17\7\3\0\4\7\1\43\2\7"+
    "\1\44\13\7\1\45\3\0\23\45\3\20\1\0\23\20"+
    "\3\21\1\0\23\21\30\0\3\46\24\0\3\47\23\0"+
    "\2\26\2\0\23\26\3\0\1\30\26\0\1\33\24\0"+
    "\3\50\23\0\1\7\3\0\2\7\1\51\21\7\3\0"+
    "\2\7\1\52\21\7\3\0\16\53\6\7\3\0\7\7"+
    "\1\54\14\7\3\0\11\7\1\55\12\7\3\0\2\7"+
    "\1\56\21\7\3\0\3\7\1\57\20\7\3\0\13\7"+
    "\1\60\10\7\3\0\4\7\1\61\17\7\3\0\12\7"+
    "\1\62\11\7\3\0\13\7\1\63\10\7\3\0\4\7"+
    "\1\64\17\7\3\0\5\7\1\65\16\7\3\0\5\7"+
    "\1\66\16\7\3\0\5\7\1\67\16\7\3\0\5\7"+
    "\1\70\16\7\3\0\1\7\1\71\22\7\3\72\23\7"+
    "\1\73\3\0\23\73\1\74\1\75\1\0\1\75\23\74"+
    "\1\7\1\76\1\0\1\76\24\7\3\0\5\7\1\77"+
    "\15\7\1\0\3\72\23\0\1\74\3\0\23\74\1\0"+
    "\1\75\1\0\1\75\24\0\1\76\1\0\1\76\23\0"+
    "\1\7\1\100\1\0\1\100\23\7\1\0\1\100\1\0"+
    "\1\100\23\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  3,  3,  1,  1,  9,  9,  1,  9,  3,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  5,  5,  5,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    /** tokens */
    public enum Types {
        /** Parser error. */
        ERROR,
        /** Parser warning. */
        WARNING,
        /** Start of global block. */
        GLOBALSTART,
        /** End of global block. */
        GLOBALEND,
        /** Start of data block. */
        DATASTART,
        /** End of data block. */
        DATAEND,
        /** Start of saveframe. */
        SAVESTART,
        /** End of saveframe. */
        SAVEEND,
        /** Start of loop. */
        LOOPSTART,
        /** End of loop. */
        STOP,
        /** Tag. */
        TAGNAME,
        /** Value enclosed in single quotes. */
        DVNSINGLE,
        /** Value enclosed in double quotes. */
        DVNDOUBLE,
        /** Value enclosed in semicolons. */
        DVNSEMICOLON,
        /** Framecode value. */
        DVNFRAMECODE,
        /** Bareword value. */
        DVNNON,
        /** Comment. */
        COMMENT,
        /** End of input. */
        EOF;
    }
    /* buffer for quoted values */
    private StringBuilder buf;
    /** Returns line number (counting from 1).
     * Returns <CODE>yyline + 1</CODE>
     * @return line number
     */
    public int getLine() {
        return yyline + 1;
    }
    /** Returns column number.
     * @return column number
     */
    public int getColumn() {
        return yycolumn;
    }
    /** Returns text of the last token.
     * <P>
     * Use this method instead of <CODE>yytext()</CODE> to retrieve tokens.
     *<P>
     * Because quoted values (DVNSINGLE, DVNDOUBLE, DVNSEMICOLON) are parsed
     * differently from non-quoted ones (DVNNON and DVNFRAMECODE), their
     * text is stored in a separate buffer.
     * <P>
     * For other token types returns <CODE>yytext()</CODE>.
     */
    public String getText() {
        if( buf.length() < 1 ) return yytext();
	return buf.toString();
    }
    /** Pushes number of characters back into input stream.
     * @param num number of characters to push back
     */
    public void pushBack( int num ) {
        yypushback( num );
    }
//******************************************************************************


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public STARLexer(java.io.Reader in) {
      buf = new StringBuilder();
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public STARLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[1196];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1652) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Types yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;
    int yy_pushbackPos_l = yy_pushbackPos = -1;
    boolean yy_was_pushback;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            yy_pushbackPos = yy_pushbackPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            yy_pushbackPos_l = yy_pushbackPos;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 2) == 2 )
            yy_pushbackPos_l = yy_currentPos_l;

          if ( (yy_attributes & 1) == 1 ) {
            yy_was_pushback = (yy_attributes & 4) == 4;
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;
      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos_l;

      switch (yy_action) {

        case 62: 
        case 63: 
          { 
        buf.setLength( 0 );
	    return Types.GLOBALSTART;
     }
        case 65: break;
        case 54: 
        case 60: 
          { 
        buf.setLength( 0 );
	    return Types.SAVEEND;
     }
        case 66: break;
        case 52: 
        case 57: 
          { 
        buf.setLength( 0 );
	    return Types.LOOPSTART;
     }
        case 67: break;
        case 16: 
          { 
//System.err.printf( "Matched %s in ^{SEMI}\n", yytext() );
        buf.setLength( 0 );
        buf.append( yytext().substring( 1 ) );
        yybegin( YYSEMI );
     }
        case 68: break;
        case 15: 
          { 
        buf.setLength( 0 );
	    return Types.COMMENT;
     }
        case 69: break;
        case 24: 
          { 
//System.err.printf( "In YYSEMIEND, matched |%s|, drop back\n", yytext() );
        buf.append( "\n" );
	    buf.append( yytext() );
	    yybegin( YYSEMI );
     }
        case 70: break;
        case 29: 
          { 
        buf.setLength( 0 );
        yybegin( YYDOUBLE );
     }
        case 71: break;
        case 38: 
          { 
    yybegin( YYINITIAL );
    return Types.DVNDOUBLE;
 }
        case 72: break;
        case 37: 
          { 
//System.err.printf( "Matched %s in {YYSINGLE}, exit\n", yytext() );
    yybegin( YYINITIAL );
    return Types.DVNSINGLE;
 }
        case 73: break;
        case 6: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 40: 
        case 41: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 53: 
        case 56: 
          { 
//System.err.printf( "Matched %s in {NON_WS}+\n", yytext() );
        buf.setLength( 0 );
	    buf.append( yytext() );
	    return Types.DVNNON;
     }
        case 74: break;
        case 17: 
        case 19: 
        case 20: 
          { 
//System.err.printf( "Matched %s in {YYSINGLE|DOUBLE}, cont.\n", yytext() );
        buf.append( yytext() );
     }
        case 75: break;
        case 22: 
        case 23: 
          { 
//System.err.printf( "In YYSEMI, matched |%s|, begin SEMIEND\n", yytext() );
	yybegin( YYSEMIEND );
     }
        case 76: break;
        case 39: 
          { 
//System.err.printf( "In YYSEMIEND, matched |%s|, exit\n", yytext() );
        yybegin( YYINITIAL );
        return Types.DVNSEMICOLON;
     }
        case 77: break;
        case 55: 
        case 61: 
          { 
        buf.setLength( 0 );
	    return Types.STOP;
     }
        case 78: break;
        case 25: 
        case 26: 
          { 
        buf.append( "\n" );
     }
        case 79: break;
        case 36: 
          { 
        buf.setLength( 0 );
	    buf.append( yytext().substring( 1 ) );
	    return Types.DVNFRAMECODE;
     }
        case 80: break;
        case 21: 
          { 
//System.err.printf( "In YYSEMI, matched |%s|\n", yytext() );
        buf.append( yytext() );
     }
        case 81: break;
        case 59: 
          { 
        buf.setLength( 0 );
	    buf.append( yytext().substring( 5 ) );
	    return Types.SAVESTART;
     }
        case 82: break;
        case 58: 
          { 
        buf.setLength( 0 );
	    buf.append( yytext().substring( 5 ) );
	    return Types.DATASTART;
     }
        case 83: break;
        case 28: 
          { 
//System.err.printf( "Matched %s in {SINGLESTART}\n", yytext() );
        buf.setLength( 0 );
	    yybegin( YYSINGLE );
     }
        case 84: break;
        case 18: 
        case 27: 
          { 
//System.err.printf( "In ERROR, matched |%s|\n", yytext() );
    buf.setLength( 0 );
    buf.append( "Unknown token: ``" );
    buf.append( yytext() );
    buf.append( "''" );
    return Types.ERROR;
 }
        case 85: break;
        case 42: 
          { 
        buf.setLength( 0 );
	    buf.append( yytext() );
	    return Types.TAGNAME;
     }
        case 86: break;
        case 7: 
        case 8: 
          {  }
        case 87: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            switch (yy_lexical_state) {
            case YYINITIAL:
              { 
        buf.setLength( 0 );
        return Types.EOF;
     }
            case 65: break;
            default:
            return null;
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
