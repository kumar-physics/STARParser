/* The following code was generated by JFlex 1.3.5 on 4/3/06 5:37 PM */

/* NMR-STAR lexer with some grammar checking */
/*
 * This software is copyright (c) 2002 Board of Regents, University of Wisconsin.
 * All Rights Reserved.
 *
 * FILE:        $Source: /cvs_archive/cvs/sansj/src/EDU/bmrb/sansj/STARLexer.java,v $
 * 
 * AUTHOR:      $Author: dmaziuk $
 * DATE:        $Date: 2006/04/03 22:40:41 $
 * 
 * UPDATE HISTORY:
 * ---------------
 * $Log: STARLexer.java,v $
 * Revision 1.1  2006/04/03 22:40:41  dmaziuk
 * bug fix in lex specs.
 *
 * Revision 1.6  2005/11/10 00:17:38  dmaziuk
 * *** empty log message ***
 *
 * Revision 1.5  2004/03/03 23:55:23  dmaziuk
 * removed unneeded 'keyword in value' warnings
 *
 * Revision 1.4  2004/03/03 23:11:45  dmaziuk
 * fixed a bug in comment parsing
 *
 * Revision 1.3  2003/05/16 00:57:53  dmaziuk
 * Fixed a bug in end-of-loop processing (CIFs don't have stop_)
 *
 * Revision 1.2  2003/01/23 01:36:43  dmaziuk
 * fixed comment parsing errors
 *
 * Revision 1.1.1.1  2003/01/10 22:01:19  dmaziuk
 * initial import
 *
 */

package EDU.bmrb.sansj;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 4/3/06 5:37 PM from the specification file
 * <tt>file:/share2/dmaziuk/sansj/src/EDU/bmrb/sansj/star.flex</tt>
 */
public class STARLexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYDOUBLE = 2;
  final public static int YYSEMI = 3;
  final public static int YYINITIAL = 0;
  final public static int YYSINGLE = 1;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\10\0\2\1\1\25\2\2\1\3\22\0\1\1\1\0\1\21\1\24"+
    "\1\23\2\0\1\20\23\0\1\22\5\0\1\10\1\7\1\0\1\12"+
    "\1\16\1\0\1\4\4\0\1\5\2\0\1\6\1\17\2\0\1\14"+
    "\1\13\1\0\1\15\10\0\1\11\1\0\1\10\1\7\1\0\1\12"+
    "\1\16\1\0\1\4\4\0\1\5\2\0\1\6\1\17\2\0\1\14"+
    "\1\13\1\0\1\15\5\0\1\2\10\0\1\2\u1fa2\0\2\2\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    22,    44,    66,    88,   110,   132,   154,   176,   198, 
      220,   242,   264,   286,   308,   330,   352,   374,   396,   418, 
      396,   440,   462,   484,   110,   330,   330,    88,   330,   506, 
      528,   220,   550,   572,   594,   286,   616,   352,   638,   660, 
      682,   704,   374,   396,   418,   440,   330,   726,   748,   770, 
      792,   814,   836,   858,   880,   902,   924,   946,   968,   990, 
     1012,  1034,  1056,  1078,  1100,  1122,    88,  1144,  1166,    88, 
     1188,  1210,  1232,  1144,  1166,  1254,   330,    88
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\5\1\6\1\7\1\10\1\11\1\12\3\5\1\13"+
    "\1\14\1\5\1\15\6\5\1\16\1\17\1\10\1\20"+
    "\1\21\1\22\1\23\14\20\1\24\4\20\1\25\1\20"+
    "\1\21\1\22\1\23\15\20\1\26\3\20\1\25\1\20"+
    "\1\21\1\27\1\30\21\20\1\30\1\5\1\0\1\5"+
    "\1\0\21\5\2\0\1\31\1\0\1\31\14\0\1\32"+
    "\1\33\3\0\1\31\1\5\1\0\1\5\1\0\16\5"+
    "\1\34\2\5\2\0\1\31\1\0\1\31\14\0\1\32"+
    "\1\33\1\35\2\0\1\31\1\5\1\0\1\5\1\0"+
    "\1\5\1\36\17\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\37\16\5\1\0\1\40\1\0\1\40\1\0"+
    "\21\40\1\0\1\5\1\0\1\5\1\0\4\5\1\41"+
    "\14\5\1\0\1\5\1\0\1\5\1\0\4\5\1\42"+
    "\2\5\1\43\11\5\1\0\1\44\1\0\1\44\1\0"+
    "\21\44\1\0\1\17\1\45\1\5\1\0\21\17\30\0"+
    "\1\46\1\0\1\46\1\47\1\50\4\0\1\51\1\0"+
    "\1\52\10\0\1\46\2\0\2\53\1\47\1\50\4\0"+
    "\1\51\1\0\1\52\10\0\1\53\1\0\1\46\1\53"+
    "\1\54\1\47\1\50\4\0\1\51\1\0\1\52\10\0"+
    "\1\54\1\0\1\55\1\0\1\55\21\0\1\55\1\0"+
    "\1\56\1\0\1\56\21\0\1\56\2\0\2\53\1\47"+
    "\1\50\4\0\1\51\1\0\1\52\5\0\1\57\2\0"+
    "\1\53\1\0\1\46\1\53\1\54\1\47\1\50\4\0"+
    "\1\51\1\0\1\52\5\0\1\57\2\0\1\54\1\5"+
    "\1\0\1\5\1\0\2\5\1\60\16\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\61\16\5\1\0\1\5"+
    "\1\0\1\5\1\0\7\5\1\62\11\5\1\0\1\5"+
    "\1\0\1\5\1\0\11\5\1\63\7\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\64\16\5\1\0\2\45"+
    "\2\0\21\45\6\0\1\65\26\0\1\66\27\0\1\67"+
    "\25\0\1\70\2\0\1\66\12\0\1\5\1\0\1\5"+
    "\1\0\3\5\1\71\15\5\1\0\1\5\1\0\1\5"+
    "\1\0\13\5\1\72\5\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\73\14\5\1\0\1\5\1\0\1\5"+
    "\1\0\12\5\1\74\6\5\1\0\1\5\1\0\1\5"+
    "\1\0\13\5\1\75\5\5\7\0\1\76\25\0\1\77"+
    "\32\0\1\100\27\0\1\101\10\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\102\14\5\1\0\1\5\1\0\1\5"+
    "\1\0\5\5\1\103\13\5\1\0\1\5\1\0\1\5"+
    "\1\0\5\5\1\104\13\5\1\0\1\5\1\0\1\5"+
    "\1\0\5\5\1\105\13\5\1\0\1\5\1\0\1\5"+
    "\1\0\5\5\1\106\13\5\10\0\1\107\35\0\1\110"+
    "\16\0\1\110\33\0\1\110\7\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\111\17\5\1\0\1\112\1\0\1\112"+
    "\1\0\21\112\1\0\1\113\1\0\1\113\1\0\21\113"+
    "\11\0\1\114\26\0\1\115\14\0\1\5\1\0\1\5"+
    "\1\0\5\5\1\116\13\5\6\0\1\110\20\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  3,  1,  3,  1,  1,  0,  9,  9,  1,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  5,  5,  9,  1, 
     1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0, 
     0,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  0,  9,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    /* tokens */
    /** lexer error token */
    public static final int ERROR = 0;
    /** lexer warning token */
    public static final int WARNING = 1;
    /** start of global block token */
    public static final int GLOBALSTART = 2;
    /** start of data block token */
    public static final int DATASTART = 3;
    /** end of saveframe token */
    public static final int SAVEEND = 4;
    /** start of saveframe token */
    public static final int SAVESTART = 5;
    /** start of loop token */
    public static final int LOOPSTART = 6;
    /** end of loop token */
    public static final int STOP = 7;
    /** tag token */
    public static final int TAGNAME = 8;
    /** value in single quotes token */
    public static final int DVNSINGLE = 9;
    /** value in double quotes token */
    public static final int DVNDOUBLE = 10;
    /** value in semicolons token */
    public static final int DVNSEMICOLON = 11;
    /** framecode value token */
    public static final int DVNFRAMECODE = 12;
    /** bareword value token */
    public static final int DVNNON = 13;
    /** comment token */
    public static final int COMMENT = 14;
    /** token names. Use int token constant as array index */
    public static final String [] TOKEN_TYPES = {
    "ERROR",
    "WARNING",
    "GLOBALSTART",
    "DATASTART",
    "SAVEEND",
    "SAVESTART",
    "LOOPSTART",
    "STOP",
    "TAGNAME",
    "DVNSINGLE",
    "DVNDOUBLE",
    "DVNSEMICOLON",
    "DVNFRAMECODE",
    "DVNNON",
    "COMMENT" };
    /* buffer for quoted values */
    private StringBuffer buf;
    /** Returns line number (counting from 1).
     * Returns <CODE>yyline + 1</CODE>
     * @return line number
     */
    public int getLine() {
        return yyline + 1;
    }
    /** Returns column number.
     * @return column number
     */
    public int getColumn() {
        return yycolumn;
    }
    /** Returns DVNSINGLE, DVNDOUBLE, or DVNSEMICOLON value text.
     *<P>
     * Because quoted values (DVNSINGLE, DVNDOUBLE, DVNSEMICOLON) are parsed
     * differently from non-quoted ones (DVNNON and DVNFRAMECODE), their
     * text is stored in a separate buffer.
     * <P>
     * Use <CODE>yytext()</CODE> to retrieve text of any token
     * other than DVNSINGLE, DVNDOUBLE, or DVNSEMICOLON value. Use 
     * <CODE>getText()</CODE> to retrieve text of DVNSINGLE, DVNDOUBLE, 
     * or DVNSEMICOLON token.
     */
    public String getText() {
        return buf.toString();
    }
    /** Pushes number of characters back into input stream.
     * @param num number of characters to push back
     */
     public void pushBack( int num ) {
         yypushback( num );
     }
//******************************************************************************


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public STARLexer(java.io.Reader in) {
      buf = new StringBuffer();
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public STARLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[1276];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;
    int yy_pushbackPos_l = yy_pushbackPos = -1;
    boolean yy_was_pushback;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            yy_pushbackPos = yy_pushbackPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            yy_pushbackPos_l = yy_pushbackPos;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 2) == 2 )
            yy_pushbackPos_l = yy_currentPos_l;

          if ( (yy_attributes & 1) == 1 ) {
            yy_was_pushback = (yy_attributes & 4) == 4;
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;
      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos_l;

      switch (yy_action) {

        case 20: 
          { 
    buf.setLength( 0 );
    buf.append( "Invalid token: ``" );
    buf.append( yytext() );
    buf.append( "''" );
    return ERROR;
 }
        case 79: break;
        case 31: 
          {  return TAGNAME;  }
        case 80: break;
        case 68: 
          {  return SAVEEND;  }
        case 81: break;
        case 44: 
          { 
        yybegin( YYINITIAL ); 
        return DVNSINGLE;
     }
        case 82: break;
        case 45: 
          { 
        yybegin( YYINITIAL ); 
        return DVNDOUBLE;
     }
        case 83: break;
        case 77: 
          {  return GLOBALSTART;  }
        case 84: break;
        case 26: 
          {  
        buf.setLength( 0 );
        yybegin( YYDOUBLE ); 
     }
        case 85: break;
        case 25: 
          {  
        buf.setLength( 0 );
        yybegin( YYSINGLE ); 
     }
        case 86: break;
        case 22: 
        case 23: 
          {  buf.append( yytext() );  }
        case 87: break;
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 21: 
          {  buf.append( yytext() );  }
        case 88: break;
        case 5: 
        case 7: 
          {   }
        case 89: break;
        case 27: 
        case 28: 
          {  
        buf.setLength( 0 );
        yybegin( YYSEMI ); 
     }
        case 90: break;
        case 46: 
          {  
        yybegin( YYINITIAL ); 
        return DVNSEMICOLON;
     }
        case 91: break;
        case 69: 
          {  return STOP;  }
        case 92: break;
        case 66: 
          {  return LOOPSTART;  }
        case 93: break;
        case 35: 
          {  return DVNFRAMECODE;  }
        case 94: break;
        case 4: 
        case 6: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 29: 
        case 30: 
        case 32: 
        case 33: 
        case 34: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 65: 
        case 67: 
        case 72: 
          {  return DVNNON;  }
        case 95: break;
        case 14: 
        case 36: 
          {  return COMMENT;  }
        case 96: break;
        case 76: 
          { 
        buf.append( yytext() );
	return WARNING;
     }
        case 97: break;
        case 74: 
          {  return SAVESTART;  }
        case 98: break;
        case 73: 
          {  return DATASTART;  }
        case 99: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            switch (yy_lexical_state) {
            case YYINITIAL:
              {  return YYEOF;  }
            case 79: break;
            default:
            return YYEOF;
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
